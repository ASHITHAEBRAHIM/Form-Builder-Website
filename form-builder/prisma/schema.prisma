// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Form {
  id          Int          @id @default(autoincrement())
  formName    String
  createdDate DateTime     @default(now())
  submissions Submission[]
  questions   Question[]
}

model Submission {
  id          Int        @id @default(autoincrement())
  formId      Int
  firstName   String
  lastName    String
  submittedAt DateTime   @default(now())
  form        Form       @relation(fields: [formId], references: [id])
  responses   Response[]
}

model Question {
  id        Int          @id @default(autoincrement())
  formId    Int
  question  String
  type      QuestionType
  options   Option[]
  form      Form         @relation(fields: [formId], references: [id])
  responses Response[]
}

enum QuestionType {
  Radio
  Checkbox
  Button
  TextField
  TextArea
  Email
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  value      String
  question   Question @relation(fields: [questionId], references: [id])
}

model Response {
  id           Int        @id @default(autoincrement())
  submissionId Int
  questionId   Int
  answer       String
  submission   Submission @relation(fields: [submissionId], references: [id])
  question     Question   @relation(fields: [questionId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
